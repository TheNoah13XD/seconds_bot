generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id String @id @default(cuid())

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  name String?

  email           String?   @unique
  emailVerifiedAt DateTime?
  phone           String?   @unique
  phoneVerifiedAt DateTime?

  hashedPassword String?

  birthdate     DateTime?     @db.Date
  username      String        @unique
  role          UserRole      @default(USER)
  gems          Float         @default(0)
  balance       Float         @default(0)
  price         Float         @default(0)
  status        UserStatus    @default(DISCONNECTED)
  lastSeenAt    DateTime?
  verifiedAt    DateTime?
  images        UserImage[]
  givenCalls    Call[]        @relation("GivenCalls")
  sessions      Session[]
  tokens        Token[]
  links         UserLink[]
  receivedCalls Call[]        @relation("ReceivedCalls")
  transactions  Transaction[]
  favorites     Favorite[]    @relation("Favorites")
  favoritesOf   Favorite[]    @relation("FavoritesOf")
  reports       Report[]      @relation("Reports")
  reportedBy    Report[]      @relation("ReportedBy")

  videoPreviewUploadedAt DateTime?

  paymentMethods PaymentMethod[]

  kycReferenceKey String?
  kycSubmittedAt  DateTime?
  kycVerifiedAt   DateTime?
  kycRefusedAt    DateTime?
  kycData         Json?

  discordUserId String? @unique

  trolleyReferenceId String?            @unique
  trolleySubmittedAt DateTime?
  trolleyRecipientId String?            @unique
  UserVerification   UserVerification[]

  TipsMade     Tip[] @relation("GivenTips")
  TipsReceived Tip[] @relation("ReceivedTips")

  BlocksMade     Block[] @relation("BlocksMade")
  BlocksReceived Block[] @relation("BlocksReceived")
}

model PaymentMethod {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  paymentProfileId     String             @unique
  billingAddress       UserBillingAddress @relation(fields: [userBillingAddressId], references: [id])
  userBillingAddressId String             @unique

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([userId])
}

model UserBillingAddress {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  country       String
  addressLine1  String
  addressLine2  String?
  city          String
  state         String? // Only US
  province      String? // Only Canada
  zipCode       String? // Only US
  postalCode    String? // Everywhere outside of USA
  paymentMethod PaymentMethod?
}

model UserImage {
  id    String  @id @default(cuid())
  url   String
  hash  String?
  order Int     @default(0)

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@index([userId])
  @@index([url])
}

model UserVerification {
  id                   String             @id
  liveness             Boolean            @default(false)
  faceMatch            Boolean            @default(false)
  documentAuthenticity Boolean            @default(false)
  state                VerificationStates

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  @@index([userId])
}

model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  author   User   @relation(fields: [authorId], name: "Favorites", references: [id])
  authorId String

  user   User   @relation(fields: [userId], name: "FavoritesOf", references: [id])
  userId String

  @@index([authorId])
  @@index([userId])
}

model UserLink {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      LinkType
  name      String   @db.VarChar(40)
  url       String   @db.VarChar(2048)
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
}

model Transaction {
  id          String          @id @default(cuid())
  sid         String          @unique
  createdAt   DateTime        @default(now())
  type        TransactionType
  gems        Float
  amount      Float
  currency    String
  source      String?
  destination String?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
  userId             String?
  user               User?     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  expiresAt   DateTime
  sentTo      String
  userId      String
  type        TokenType
  user        User      @relation(fields: [userId], references: [id])

  @@unique([hashedToken, type])
  @@index([userId])
}

model Call {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?

  // Initial price per second in gems
  pricePerSecond Float @default(0)
  // Total call price in gems
  price          Float @default(0)
  // Fee in gems
  fee            Float @default(0)
  // Earnings in dollars
  earnings       Float @default(0)

  duration Float @default(0)

  authorId String
  author   User   @relation("GivenCalls", fields: [authorId], references: [id])

  participantId String
  participant   User   @relation("ReceivedCalls", fields: [participantId], references: [id])

  sid String @unique

  tips Tip[] @relation("Tips")

  @@index([authorId])
  @@index([participantId])
}

enum UserStatus {
  CONNECTED
  AWAY
  DISCONNECTED
}

enum LinkType {
  TWITTER
  FACEBOOK
  INSTAGRAM
  YOUTUBE
  TIKTOK
  OTHER
}

enum UserRole {
  USER
  CREATOR
  ADMIN
}

enum TokenType {
  RESET_PASSWORD
  VERIFY_EMAIL
  ACCESS_TOKEN
}

enum VerificationStates {
  PENDING
  APPROVED
  REJECTED
}

model Report {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  authorId String
  author   User   @relation("Reports", fields: [authorId], references: [id])

  userId String
  User   User   @relation("ReportedBy", fields: [userId], references: [id])

  reason String?

  @@unique([authorId, userId])
  @@index([userId])
}

model GemPack {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  price Float
  gems  Float
}

model Tip {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sid  String
  gems Float

  callId String?
  call   Call?   @relation("Tips", fields: [callId], references: [id])

  authorId String
  author   User   @relation("GivenTips", fields: [authorId], references: [id])

  creatorId String
  creator   User   @relation(name: "ReceivedTips", fields: [creatorId], references: [id])

  @@index([authorId])
  @@index([creatorId])
  @@index([callId])
}

model Block {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId String
  author   User   @relation("BlocksMade", fields: [authorId], references: [id])

  blockedId String
  blocked   User   @relation(name: "BlocksReceived", fields: [blockedId], references: [id])

  @@unique([authorId, blockedId])
  @@index([authorId])
  @@index([blockedId])
}
